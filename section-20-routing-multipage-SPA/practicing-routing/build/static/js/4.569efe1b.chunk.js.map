{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetails","match","useRouteMatch","getSingleQuote","loadedQuote","to","path","exact","url"],"mappings":"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","file":"static/js/4.569efe1b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const {onAddedComment} = props;\n  useEffect(() => {\n  if(status === 'completed' && !error){\n    onAddedComment();\n  }  \n  \n  }, [status, error,onAddedComment])\n  \n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    const enteredText = commentTextRef.current.value;\n    // send comment to server\n    sendRequest({commentData:{ text: enteredText }, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  const { quoteId } = params;\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId]);\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if(status==='completed' && (loadedComments && loadedComments.length>0)){\n    comments = <CommentsList comments={loadedComments}/>\n  }\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments= <p className=\"centered\">No comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\n// const DUMMY_QUOTES = [\n//   { id: \"q1\", author: \"a\", text: \"abc\" },\n//   { id: \"q2\", author: \"b\", text: \"asw\" },\n// ];\n\nfunction QuoteDetails() {\n  const params = useParams();\n  const match = useRouteMatch();\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true); //trues as we start in loading mode\nconst {quoteId} = params;//To only pass the quote id as we don't want the effect to run on every change of params\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest,quoteId]);\n\n  if(status === 'pending'){\n    return <div className=\"centered\">\n      <LoadingSpinner/>\n    </div>\n  }\n  if(error){\n    return <p className=\"centered\">{error}</p>\n  }\n  if(!loadedQuote.text){\n    return <p>No quote found!</p>;\n  }\n\n  // const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n  // if (!quote) {\n  //   return <p>No quote found for that id!</p>;\n  // }\n\n  return (\n    <div>\n      <h1>QuoteDetails</h1>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      {/* How to do it with state that controls when to allow showing and when to allow hiding comments */}\n      {/* <div className=\"centered\">\n        <Link\n          className=\"btn--flat\"\n          to={\n            showingComments\n              ? `/quotes/${params.quoteId}`\n              : `/quotes/${params.quoteId}/comments`\n          }\n          onClick={showCommentsHandler}\n        >\n          {showingComments ? \"Hide Comments\" : \"Show Comments\"}\n        </Link>\n      </div> */}\n      {/* How to do it with routing (show only if comments aren't currenlty show) */}\n      <Route to={`${match.path}`} exact>\n        <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n          Show Comments\n        </Link>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </div>\n  );\n}\n\nexport default QuoteDetails;\n"],"sourceRoot":""}